/*
BOJ 2579번: 계단 오르기

시간 제한: 1초
메모리 제한: 128 MB

문제
계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. <그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.

예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.

계단 오르는 데는 다음과 같은 규칙이 있다.

계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
마지막 도착 계단은 반드시 밟아야 한다.
따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.

입력
입력의 첫째 줄에 계단의 개수가 주어진다.

둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

출력
첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.
*/

//#define _CRT_SECURE_NO_WARNINGS

#include <bits/stdc++.h>

using namespace std;

int n;
int num;
vector<int> v(1);
int dp[301];

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	memset(dp, 0, sizeof(dp));

	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> num;
		v.push_back(num);
	}

	dp[0] = 0;
	dp[1] = v[1];
	dp[2] = v[1] + v[2];
	
	int cnt = 0;
	for (int i = 3; i <= n; i++)
	{
		dp[i] = max(dp[i - 3] + v[i - 1] + v[i], dp[i - 2] + v[i]);
	}

	cout << dp[n];
}

/*
bottom-up dp 반복문, 최댓값 구하기 max
dp[n]: n번째 계단에 도착했을때의 점수
점화식
	경우의 수
	마지막 계단을 기준으로 (조건 3에 의해 마지막 계단은 반드시 밟아야 하기 때문에)
		1. 이전 계단을 밟았을때 -> 그럼 전전계단은 밟지 못함 (조건 2)=> dp[n] = dp[n-3] + v[n-2]+v[n-1]
		2. 이전 계단을 밟지 않았을 떄 -> 그렇다면 두 칸 건넌 상태 (조건 1)=> dp[n] = dp[n-2] + v[n]
	이 둘의 경우의 수 밖에 없으므로, 이 둘을 max()해서 모든 경우의 수를 포함하는 점화식을 만든다

계단의 개수 n 입력
for n
	계단의 점수 vector에 저장

dp

cout << dp[n]
*/
