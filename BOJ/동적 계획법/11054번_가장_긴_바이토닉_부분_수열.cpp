/*
BOJ 11054번: 가장 긴 바이토닉 부분 수열
https://www.acmicpc.net/problem/11054

시간 제한: 1초
메모리 제한: 256 MB

문제
수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.
예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,  {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.
수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.

예제 입력 1 
10
1 5 2 1 4 3 4 5 2 1

예제 출력 1 
7 
*/

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

#define MAX 1000

int arr[MAX+1];
int LIS[MAX+1];
int LIS_Reverse[MAX+1];
int ans;
int n;

int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	cin >> n;
	for(int i=1; i<=n; i++) {
		cin >> arr[i];
	}
	
	// Calculate LIS
	for(int i=1; i<=n; i++) {	
		LIS[i] = 1;
		
		for(int j=1; j<i; j++) {
			if(arr[i] > arr[j]) {
				LIS[i] = max(LIS[i], LIS[j]+1);
			}
		}
	}
	
	// Calculate LIS_Reverse
	for(int i=n; i>=1; i--) {
		LIS_Reverse[i] = 1;
				
		for(int j=n; j>i; j--) {
			if(arr[i] > arr[j]) {
				LIS_Reverse[i] = max(LIS_Reverse[i], LIS_Reverse[j]+1);
			}
		}
	}
	
	// Calculate LBS
	for(int i=1; i<=n; i++) {
		ans = max(ans, LIS[i]+LIS_Reverse[i]-1);
	}
	
	cout << ans;
	return 0;
}

/* 
LIS + LDS
LBS[k] = LIS[k] + LIS_Reverse(LDS)[k]
수열의 정순으로 LIS를 구하고, 수열의 역순으로 LIS를 구해
k에서 LIS[k] + LIS_Reverse[k]가 최대일 때, Sk가 LBS 
*/ 
