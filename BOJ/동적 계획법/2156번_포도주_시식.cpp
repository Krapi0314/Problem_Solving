/*
BOJ 2156번: 포도주 시식

시간 제한: 2초
메모리 제한: 128 MB

문제
효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.
포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
연속으로 놓여 있는 3잔을 모두 마실 수는 없다.
효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오. 
예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.

입력
첫째 줄에 포도주 잔의 개수 n이 주어진다. (1≤n≤10,000) 둘째 줄부터 n+1번째 줄까지 포도주 잔에 들어있는 포도주의 양이 순서대로 주어진다. 포도주의 양은 1,000 이하의 음이 아닌 정수이다.

출력
첫째 줄에 최대로 마실 수 있는 포도주의 양을 출력한다. 
*/

//#define _CRT_SECURE_NO_WARNINGS

#include <bits/stdc++.h>

using namespace std;

int dp[10001];
vector<int> v(1);
int n;
int num;

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> num;
		v.push_back(num);
	}

	dp[0] = 0;
	dp[1] = v[1];
	dp[2] = v[1] + v[2];

	for (int i = 3; i <= n; i++)
	{
		dp[i] = max(dp[i - 3] + v[i - 1] + v[i], dp[i - 2] + v[i]);
		dp[i] = max(dp[i], dp[i - 1]);
	}

	cout << dp[n];
}

/*
최댓값 구하기, 완전 탐색, 동적 계획법
bottom-up
dp[n] = n개의 포도주 잔이 있을떄 마실 수 있는 최댓값
v[n]: n번쨰 포도주 잔의 양

점화식:
2579번 계단 오르기와 동일
1. n번째 잔 마심
	1. n-1번째 잔 마셨음 -> n-2번쨰 못 마심 => d[n-3] + v[n-1] + v[n]
	2. n-1번쨰 잔 안 마심 -> n-2번째 잔 마실 수 있음 => d[n-2] + v[n]
2. n번쨰 잔 안 마심
	1. n-1번쨰 잔 마심 -> n-1일떄 잔 마셨을떄의 위의 경우와 비교 -> d[n], d[n-1] 비교
의 3가지 경우가 없음
+ 
*/
