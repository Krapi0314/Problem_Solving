/*
BOJ 2941번: 크로아티아 알파벳

시간 제한: 1초
메모리 제한: 128 MB

문제
예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
크로아티아 알파벳	변경
?	c=
?	c-
d?	dz=
đ	d-
lj	lj
nj	nj
?	s=
?	z=
예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, ?, nj, a, k)로 이루어져 있다. 단어가 주어졌을 때, 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.
d?는 무조건 하나의 알파벳으로 쓰이고, d와 ?가 분리된 것으로 보지 않는다. lj와 nj도 마찬가지이다. 위 목록에 없는 알파벳은 한 글자씩 센다.

입력
첫째 줄에 최대 100글자의 단어가 주어진다. 알파벳 소문자와 '-', '='로만 이루어져 있다.
단어는 크로아티아 알파벳으로 이루어져 있다. 문제 설명의 표에 나와있는 알파벳은 변경된 형태로 입력된다.

출력
입력으로 주어진 단어가 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다. 
*/

#include <iostream>
#include <cstring>

using namespace std;


int main(void)
{
	char str[101] = { 0, };
	cin >> str;
	int cnt = 0;

	//str 배열의 원소들을 순회하며 카운트
	//알파벳을 센 뒤 다음 원소에 -,= 나오면 해당원소 카운트 X
	//특정 알파벳 lj, nj -> l뒤에 j, n뒤에 j가 나오면 j는 카운트 X

	for (int i = 0; i < strlen(str); i++)
	{
		if (str[i] == 'd' && str[i + 1] == 'z' && str[i + 2] == '=')
		{
			cnt++;
			i += 2;
		}
		else if ((str[i + 1] == '-' || str[i + 1] == '='))
		{
			cnt++;
			i++;
		}
		else if (((str[i] == 'l' && str[i + 1] == 'j') || (str[i] == 'n' && str[i+1] == 'j')))
		{
			cnt++;
			i++;
		}
		else
		{
			cnt++;
		}
	}

	cout << cnt;
}
