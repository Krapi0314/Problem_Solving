/*
BOJ 9466번: 텀 프로젝트

시간 제한: 3초
메모리 제한: 256 MB

문제
이번 가을학기에 '문제 해결' 강의를 신청한 학생들은 텀 프로젝트를 수행해야 한다. 프로젝트 팀원 수에는 제한이 없다. 심지어 모든 학생들이 동일한 팀의 팀원인 경우와 같이 한 팀만 있을 수도 있다. 프로젝트 팀을 구성하기 위해, 모든 학생들은 프로젝트를 함께하고 싶은 학생을 선택해야 한다. (단, 단 한 명만 선택할 수 있다.) 혼자 하고 싶어하는 학생은 자기 자신을 선택하는 것도 가능하다.
학생들이(s1, s2, ..., sr)이라 할 때, r=1이고 s1이 s1을 선택하는 경우나, s1이 s2를 선택하고, s2가 s3를 선택하고,..., sr-1이 sr을 선택하고, sr이 s1을 선택하는 경우에만 한 팀이 될 수 있다.
예를 들어, 한 반에 7명의 학생이 있다고 하자. 학생들을 1번부터 7번으로 표현할 때, 선택의 결과는 다음과 같다.
1	2	3	4	5	6	7
3	1	3	7	3	4	6
위의 결과를 통해 (3)과 (4, 7, 6)이 팀을 이룰 수 있다. 1, 2, 5는 어느 팀에도 속하지 않는다.
주어진 선택의 결과를 보고 어느 프로젝트 팀에도 속하지 않는 학생들의 수를 계산하는 프로그램을 작성하라.

입력
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫 줄에는 학생의 수가 정수 n (2 ≤ n ≤ 100,000)으로 주어진다. 각 테스트 케이스의 둘째 줄에는 선택된 학생들의 번호가 주어진다. (모든 학생들은 1부터 n까지 번호가 부여된다.)

출력
각 테스트 케이스마다 한 줄에 출력하고, 각 줄에는 프로젝트 팀에 속하지 못한 학생들의 수를 나타내면 된다. 
*/

//#define _CRT_SECURE_NO_WARNINGS

#include <bits/stdc++.h>

using namespace std;

#define MAX 100001

bool visited[MAX]; //더 이상 해당 정점을 방문할 일이 없음
bool finished[MAX];
int n, cnt;
int match[MAX];
int testcase;

void dfs(int vertex)
{
	visited[vertex] = true;
	int next = match[vertex];

	if (!visited[next]) //아직 방문하지 않았으면
	{
		dfs(next); //dfs
	}
	else if (!finished[next]) //방문했지만, finished된 정점이 아니면 (아직 사이클 여부는 확인하지 못했으면) => 방문한 정점을 다시 방문했으므로 사이클 형성됨
	{
		for (int i = next; i != vertex; i = match[i])
			cnt++;
		cnt++;
	}

	//위의 모든 과정을 완료했으면,
	finished[vertex] = true; //방문,사이클여부 모두 확인했으므로 더 이상 해당 정점을 방문할 일이 없으므로 true 체크
}

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	cin >> testcase;

	for (int t = 0; t < testcase; t++)
	{
		memset(visited, false, sizeof(visited));
		memset(finished, false, sizeof(finished));
		cnt = 0;

		cin >> n;
		for (int i = 1; i <= n; i++)
		{
			cin >> match[i];
		}

		for (int i = 1; i <= n; i++)
		{
			if (!visited[i])
				dfs(i);
		}

		cout << n - cnt << "\n";
	}
}

/*
주어진 선택의 결과를 보고 어느 프로젝트 팀에도 속하지 않는 학생들의 수를 계산하는 프로그램을 작성하라.
= 사이클을 형성하는 그래프의 정점들을 제외한 정점들
DFS

finished 배열: 더 이상 해당 노드를 방문할 일이 없을 때 true

void dfs(int vertex)
	visited[vertex] true
	int next = match[vertex]
	
	if not visited[next] //방문하지 않았으면
		dfs(next)
	else if not finished[next] //방문했지만 아직 finished되지 않았으면 = 사이클
		for int i = next; i != vertex; i = match[i] //사이클인 정점들 cnt
			cnt++
		cnt++ //자기 자신 세기
	
	finished[vertex] true //이 정점은 다시 방문할 일이 없음

cin testcase
	
for testcase
	init
		memset visited false
		memeset finished false
	cin n
	
	for n
		cin match[i]

	for n
		if not visited[i] //조사한 (사이클을 이루거나, 이루지 못한) 정점들은 PASS
			dfs(i)
	
	cout n - cnt 
*/	
