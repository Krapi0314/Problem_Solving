/*
백준 11660번: 구간 합 구하기 5

시간 제한: 1초
메모리 제한: 256 MB 

문제
N×N개의 수가 N×N 크기의 표에 채워져 있다. (x1, y1)부터 (x2, y2)까지 합을 구하는 프로그램을 작성하시오. (x, y)는 x행 y열을 의미한다.
예를 들어, N = 4이고, 표가 아래와 같이 채워져 있는 경우를 살펴보자.

1	2	3	4
2	3	4	5
3	4	5	6
4	5	6	7

여기서 (2, 2)부터 (3, 4)까지 합을 구하면 3+4+5+4+5+6 = 27이고, (4, 4)부터 (4, 4)까지 합을 구하면 7이다.
표에 채워져 있는 수와 합을 구하는 연산이 주어졌을 때, 이를 처리하는 프로그램을 작성하시오.

입력
첫째 줄에 표의 크기 N과 합을 구해야 하는 횟수 M이 주어진다. (1 ≤ N ≤ 1024, 1 ≤ M ≤ 100,000) 둘째 줄부터 N개의 줄에는 표에 채워져 있는 수가 1행부터 차례대로 주어진다. 다음 M개의 줄에는 네 개의 정수 x1, y1, x2, y2 가 주어지며, (x1, y1)부터 (x2, y2)의 합을 구해 출력해야 한다. 표에 채워져 있는 수는 1,000보다 작거나 같은 자연수이다. (x1 ≤ x2, y1 ≤ y2)

출력
총 M줄에 걸쳐 (x1, y1)부터 (x2, y2)까지 합을 구해 출력한다.
*/

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

int n,m;
int num;
int dp[1025][1025];
int x,y,x2,y2; 

int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	cin >> n >> m;
	for(int i=1; i<=n; i++) {
		for(int j=1; j<=n; j++) {
			cin >> num;
			
			dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1] + num;
		}
	}
	
	while(m--) {
		cin >> x >> y >> x2 >> y2;
		
		cout << dp[x2][y2] - dp[x-1][y2] - dp[x2][y-1] + dp[x-1][y-1] << "\n";
	}
}

/*
dp
!! 여기서 x는 행, y는 열을 뜻함
 
dp[x][y]: (1,1) 부터 (x,y)까지의 사각범위의 합

점화식: dp[x][y] = dp[x][y-1] + dp[x-1][y] - dp[x-1][y-1] + arr[i][j] (x,y까지의 사각형은 x-1,y까지의 사각형과 x,y-1까지의 사각형을 더한 후 겹치는 x-1,y-1 사각형을 빼고, 그 뒤에 표의 x,y 값을 더하면 됨) 
 
(x1, y1)부터 (x2, y2)의 합 = dp[x2][y2] - dp[x1-1][y2] - dp[x2][y1-1] + dp[x1-1][y1-1]
*/
