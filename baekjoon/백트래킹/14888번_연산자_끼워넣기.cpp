/*
baekjoon 14888��: ������ �����ֱ�

�ð� ����: 2��
�޸� ����: 512 MB

����
N���� ���� �̷���� ���� A1, A2, ..., AN�� �־�����. ��, ���� �� ���̿� �������� �� �ִ� N-1���� �����ڰ� �־�����. �����ڴ� ����(+), ����(-), ����(��), ������(��)���θ� �̷���� �ִ�.
�츮�� ���� �� ���̿� �����ڸ� �ϳ��� �־, ������ �ϳ� ���� �� �ִ�. �̶�, �־��� ���� ������ �ٲٸ� �� �ȴ�.
���� ���, 6���� ���� �̷���� ������ 1, 2, 3, 4, 5, 6�̰�, �־��� �����ڰ� ����(+) 2��, ����(-) 1��, ����(��) 1��, ������(��) 1���� ��쿡�� �� 60������ ���� ���� �� �ִ�. ���� ���, �Ʒ��� ���� ���� ���� �� �ִ�.

1+2+3-4��5��6
1��2+3+4-5��6
1+2��3��4-5+6
1��2��3-4+5+6
���� ����� ������ �켱 ������ �����ϰ� �տ������� �����ؾ� �Ѵ�. ��, �������� ���� ���������� �� ���Ѵ�. ������ ����� ���� ���� C++14�� ������ ������. ��, ����� �ٲ� �� ���� ���ϰ�, �� ���� ������ �ٲ� �Ͱ� ����. �̿� ����, ���� �� 4���� ����� ����غ��� �Ʒ��� ����.

1+2+3-4��5��6 = 1
1��2+3+4-5��6 = 12
1+2��3��4-5+6 = 5
1��2��3-4+5+6 = 7
N���� ���� N-1���� �����ڰ� �־����� ��, ���� �� �ִ� ���� ����� �ִ��� �Ͱ� �ּ��� ���� ���ϴ� ���α׷��� �ۼ��Ͻÿ�.

�Է�
ù° �ٿ� ���� ���� N(2 �� N �� 11)�� �־�����. ��° �ٿ��� A1, A2, ..., AN�� �־�����. (1 �� Ai �� 100) ��° �ٿ��� ���� N-1�� 4���� ������ �־����µ�, ���ʴ�� ����(+)�� ����, ����(-)�� ����, ����(��)�� ����, ������(��)�� �����̴�. 

���
ù° �ٿ� ���� �� �ִ� ���� ����� �ִ���, ��° �ٿ��� �ּڰ��� ����Ѵ�. �����ڸ� ��� �����־ �׻� -10�ﺸ�� ũ�ų� ����, 10�ﺸ�� �۰ų� ���� ����� ������ �Է¸� �־�����. ����, �տ������� ������� ��, �߰��� ���Ǵ� ���� ����� �׻� -10�ﺸ�� ũ�ų� ����, 10�ﺸ�� �۰ų� ����. 
*/

//#define _CRT_SECURE_NO_WARNINGS

#include <bits/stdc++.h>

using namespace std;

int n;
int arr[11];
char cal[10];
int cal_cnt[4]; //+,-,x,/
long Max = -1000000001;
long Min = 1000000001;

bool promising(int cal_idx)
{
	if (cal_cnt[cal_idx] == 0)
		return false;

	return true;
}

void exp(int cal_idx,long sum,int arr_idx) //�ش� �ε��� ���
{
	if (arr_idx + 1 == n)
	{
		//���
		if (cal_idx == 0)
		{
			sum += arr[arr_idx];
		}
		else if (cal_idx == 1)
		{
			sum -= arr[arr_idx];
		}
		else if (cal_idx == 2)
		{
			sum *= arr[arr_idx];
		}
		else
		{
			sum /= arr[arr_idx];
		}

		Max = max(Max, sum);
		Min = min(Min, sum);
		return;
	}
	else
	{
		//���
		if (cal_idx == 0)
		{
			sum += arr[arr_idx];
		}
		else if (cal_idx == 1)
		{
			sum -= arr[arr_idx];
		}
		else if (cal_idx == 2)
		{
			sum *= arr[arr_idx];
		}
		else
		{
			sum /= arr[arr_idx];
		}

		for (int i = 0; i < 4; i++)
		{
			if (promising(i))
			{
				cal_cnt[i]--;
				exp(i, sum, arr_idx + 1);
				cal_cnt[i]++;
			}
		}
	}
}

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	cin >> cal_cnt[0] >> cal_cnt[1] >> cal_cnt[2] >> cal_cnt[3];

	for (int i = 0; i < 4; i++)
	{
		if (promising(i))
		{
			cal_cnt[i]--;
			exp(i, arr[0], 1);
			cal_cnt[i]++;
		}
	}

	cout << Max << "\n" << Min;
}

/*

*/
