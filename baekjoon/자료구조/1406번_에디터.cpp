/*
baekjoon 1406��: ������

�ð� ����: 0.3��
�޸� ����: 512 MB

����
�� �ٷ� �� ������ �����͸� �����Ϸ��� �Ѵ�. �� ������� ���� �ҹ��ڸ��� ����� �� �ִ� �������, �ִ� 600,000���ڱ��� �Է��� �� �ִ�.
�� �����⿡�� 'Ŀ��'��� ���� �ִµ�, Ŀ���� ������ �� ��(ù ��° ������ ����), ������ �� ��(������ ������ ������), �Ǵ� ���� �߰� ������ ��(��� ���ӵ� �� ���� ����)�� ��ġ�� �� �ִ�. �� ���̰� L�� ���ڿ��� ���� �����⿡ �ԷµǾ� ������, Ŀ���� ��ġ�� �� �ִ� ���� L+1���� ��찡 �ִ�.
�� �����Ⱑ �����ϴ� ��ɾ�� ������ ����.

L:	Ŀ���� �������� �� ĭ �ű� (Ŀ���� ������ �� ���̸� ���õ�)
D:	Ŀ���� ���������� �� ĭ �ű� (Ŀ���� ������ �� ���̸� ���õ�)
B:	Ŀ�� ���ʿ� �ִ� ���ڸ� ������ (Ŀ���� ������ �� ���̸� ���õ�) ������ ���� Ŀ���� �� ĭ �������� �̵��� ��ó�� ��Ÿ������, ������ Ŀ���� �����ʿ� �ִ� ���ڴ� �״����
P $	: $��� ���ڸ� Ŀ�� ���ʿ� �߰���

�ʱ⿡ �����⿡ �ԷµǾ� �ִ� ���ڿ��� �־�����, �� ���� �Է��� ��ɾ ���ʷ� �־����� ��, ��� ��ɾ �����ϰ� �� �� �����⿡ �ԷµǾ� �ִ� ���ڿ��� ���ϴ� ���α׷��� �ۼ��Ͻÿ�. ��, ��ɾ ����Ǳ� ���� Ŀ���� ������ �� �ڿ� ��ġ�ϰ� �ִٰ� �Ѵ�.

�Է�
ù° �ٿ��� �ʱ⿡ �����⿡ �ԷµǾ� �ִ� ���ڿ��� �־�����. �� ���ڿ��� ���̰� N�̰�, ���� �ҹ��ڷθ� �̷���� ������, ���̴� 100,000�� ���� �ʴ´�. ��° �ٿ��� �Է��� ��ɾ��� ������ ��Ÿ���� ���� M(1 �� M �� 500,000)�� �־�����. ��° �ٺ��� M���� �ٿ� ���� �Է��� ��ɾ ������� �־�����. ��ɾ�� ���� �� ���� �� �ϳ��� ���·θ� �־�����.

���
ù° �ٿ� ��� ��ɾ �����ϰ� �� �� �����⿡ �ԷµǾ� �ִ� ���ڿ��� ����Ѵ�.
*/

//#define _CRT_SECURE_NO_WARNINGS

#include <bits/stdc++.h>

using namespace std;

list<char> lt;
string s;
int m;
char c, input;

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> s;
	for (int i = 0; i < s.size(); i++)
	{
		lt.push_back(s[i]);
	}

	list<char>::iterator cur = lt.end();

	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> input;
		
		if (input == 'L')
		{
			if (cur != lt.begin())
				cur--;
		}
		else if (input == 'D')
		{
			if (cur != lt.end())
				cur++;
		}
		else if (input == 'B')
		{
			if (cur != lt.begin())
				cur = lt.erase(--cur);
		}
		else
		{
			cin >> c;

			cur = lt.insert(cur, c);
			cur++;
		}
	}

	for (cur = lt.begin(); cur != lt.end(); cur++)
	{
		cout << *cur;
	}
}

/*
�ڷᱸ��, list

!!deque�� ����ϸ� dq.insert�� dq.erase ������ 0.3�� �ȿ� ���� �Ұ�
=> ���Ҹ� ��ȸ�ϸ鼭 ������ ������ ������ ����ϴ� list ���! 

list lt
list iterator cur (Ŀ�� = iter, Ŀ���� Ŀ���� ����Ű�� ���ҿ� ���� ���� ���̿� �ִٰ� ����)

cin string s
for s
	dq pushback s component

cur = lt.end()

cin m
for m
	cin char input
	if input L
		if cur != lt.begin()
			cur--;
	else if input D
		if cur != lt.end()
			cur++;
	else if input B
		if cur != lt.begin()
			cur = lt.erase(--cur) //Ŀ���� ������ ���Ҹ� �����ϹǷ�, --cur �� �ڿ� ����, ��ȯ���� ���� ������ iter�̹Ƿ� �״�� �޾Ƽ� cur�� ����
	else
		cin char c
		
		cur = lt.insert (cur,c) //Ŀ���� ���ʿ� ����, ��ȯ���� ������ ������ iter�̹Ƿ� cur�� ����
		cur++ //Ŀ���� ������ ���� �����ʿ� �־�� �ϹǷ� cur++
*/
